AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet.
Parameters:
  ParentClusterStackName:
    Type: String
    Default: sohail-alpha-fargate-cluster
    Description: The name of the parent Fargate stack that you created.
  ParentVPCStackName:
    Type: String
    Default: sohail-alpha-vpc
    Description: The name of the parent VPC networking stack that you created.
  ParentDbStack:
    Type: String
    Default: sohail-alpha-database
    Description: The name of the parent database stack
  ServiceName:
    Type: String
    Default: extractor
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: 999999999999.dkr.ecr.eu-west-2.amazonaws.com/sohail-alpha-ecr:latest
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 4096
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 8192
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 0
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc
  SchedulerTasksCount:
    Type: Number
    Default: 1
    Description: How many copies of the task to run from scheduler
  CronOrRate:
    Type: String
    Default: cron
    AllowedValues:
    - cron
    - rate
    Description: Choose to use a cron expression or a rate expression you want to use.
  CronSchedule:
    Type: String
    Default: cron(0 8 1 * ? *)
    Description: This defines the Schedule at which to run the. Cron Expressions - http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
  RateSchedule:
    Type: String
    Default: rate(28 days)
    Description: This defines the Schedule at which to run the. Rate Expressions - http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#RateExpressions
    
Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]
  CronRate: !Equals [ !Ref 'CronOrRate', 'cron' ]

Resources:

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-${ServiceName}
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'ParentClusterStackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-${ServiceName}
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-create-group: 'true'
                awslogs-group: !Sub ${ServiceName}-container-logs
                awslogs-region: !Sub ${AWS::Region}
                awslogs-stream-prefix: !Sub ${AWS::StackName}
          Environment:
            - Name: Database__SohailData__Host
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'ParentDbStack', 'DBProxyEndpoint']]
            - Name: Database__SohailData__Port
              Value: "5432"
          Secrets:
            - Name: ConnectionStrings__SohailData
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:sohailsDbConnectionString"
            - Name: Database__SohailData__Username
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:sohail-alpha-secrets-db:username::"
            - Name: Database__SohailData__Password
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:sohail-alpha-secrets-db:password::"

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-${ServiceName}
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'ParentClusterStackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'ParentVPCStackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'ParentVPCStackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'ParentVPCStackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'

  ScheduledTask:
    DependsOn: EventRole
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${AWS::StackName}-${ServiceName}-scheduled-event
      Description: Creating a Schedule with CloudFormation as an example
      ScheduleExpression:
        Fn::If:
        - CronRate
        - Ref: CronSchedule
        - Ref: RateSchedule
      State: ENABLED
      Targets:
      - Arn:
          Fn::ImportValue:
            !Join [':', [!Ref 'ParentClusterStackName', 'ClusterArn']]
        Id: !Ref ServiceName
        RoleArn: !GetAtt EventRole.Arn
        EcsParameters:
          TaskCount: !Ref SchedulerTasksCount
          TaskDefinitionArn: !Ref 'TaskDefinition'
          LaunchType: FARGATE
          NetworkConfiguration:
            AwsVpcConfiguration:
              SecurityGroups:
                - Fn::ImportValue:
                    !Join [':', [!Ref 'ParentVPCStackName', 'FargateContainerSecurityGroup']]
              Subnets:
                - Fn::ImportValue:
                    !Join [':', [!Ref 'ParentVPCStackName', 'PrivateSubnetOne']]
  EventRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-events-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: event-rule-run-ecs-task
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:RunTask
            Resource: "*"
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: "*"

